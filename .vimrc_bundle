" 奇葩的是我自己的mac2016-13寸用的是系统默认的vim -clipboard, 7.4版本，不用set mouse=a就可以用，支持选中复制。
" 然后别的电脑装了+clipboard, vim 8.0然后各种奇怪表现
" Configuration file for vim
set modelines=0		" CVE-2007-2438

set nocompatible	" Use Vim defaults instead of 100% vi compatibility
set backspace=2		" more powerful backspacing
set hlsearch

" Don't write backup file if vim is being called by "crontab -e"
au BufWrite /private/tmp/crontab.* set nowritebackup nobackup
" Don't write backup file if vim is being called by "chpass"
au BufWrite /private/etc/pw.* set nowritebackup nobackup

" 语法和显示行号
syntax on
set nu!

" 缩进 智能搜索
set ignorecase smartcase
set autoindent  
set tabstop=4  
set shiftwidth=4  
set expandtab  " tab 按照空格存储
"set mouse=a "在mac系统需要按住opt才能进行复制文件，linux按住shift
retab!

if has("autocmd")
	autocmd FileType python setlocal ts=4 sts=4 sw=4 expandtab
endif
"set list
"set listchars=tab:▸\ ,

" 自定义 ctags TagList TlistToggle cscope等配置
" <<快捷生成ctags文件 ctrl+F12>>
map <C-F12> :!ctags -R --c++-kinds=+p --fields=+iaS --extra=+q .<CR> 

" <<Tlist 配置>>
"启动vim后自动打开taglist窗口
"let Tlist_Auto_Open = 1
"设置taglist打开关闭的快捷键F8
noremap <F8> :TlistToggle<CR>
"更新ctags标签文件快捷键设置
noremap <F6> :!ctags -R<CR>
"不同时显示多个文件的tag，仅显示一个
let Tlist_Show_One_File=1
"taglist为最后一个窗口时，退出vim
let Tlist_Exit_OnlyWindow=1

" <<cscope 窗口设置>>
set cscopequickfix=s-,c-,d-,i-,t-,e-
nmap <C-_>s :cs find s <C-R>=expand("<cword>")<CR><CR>
nmap <C-_>g :cs find g <C-R>=expand("<cword>")<CR><CR>
nmap <C-_>c :cs find c <C-R>=expand("<cword>")<CR><CR>
nmap <C-_>t :cs find t <C-R>=expand("<cword>")<CR><CR>
nmap <C-_>e :cs find e <C-R>=expand("<cword>")<CR><CR>
nmap <C-_>f :cs find f <C-R>=expand("<cfile>")<CR><CR>
nmap <C-_>i :cs find i ^<C-R>=expand("<cfile>")<CR>$<CR>
nmap <C-_>d :cs find d <C-R>=expand("<cword>")<CR><CR>

" <<OmniCppComplete>>
set nocp 
filetype plugin on  

" <<SuperTab>>
"let g:SuperTabDefaultCompletionType="context"  

" <<miniBufExplorer>>
let g:miniBufExplMapWindowNavVim = 1   
let g:miniBufExplMapWindowNavArrows = 1   
let g:miniBufExplMapCTabSwitchBufs = 1   
let g:miniBufExplModSelTarget = 1  
let g:miniBufExplMoreThanOne=0  

" <<winManager>>
let g:winManagerWidth=30
let g:winManagerWindowLayout="NERDTree"
"let g:winManagerWindowLayout="NERDTree|TagList"  
nmap wm :WMToggle<CR> 

" <<Nerd Tree>>
let g:NERDTree_title="[NERDTree]"  
  
function! NERDTree_Start()  
	exe  'q'
    exec 'NERDTree'  
endfunction  
  
function! NERDTree_IsValid()  
    return 1  
endfunction  

" <<Tagbar>>
"let g:tagbar_width=30 
"let g:tagbar_left=1
let g:Tagbar_title = "[Tagbar]"
function! Tagbar_Start()
    "exe 'q' "执行一个退出命令，关闭自动出现的窗口"
    exe 'TagbarOpen'
endfunction
 
function! Tagbar_IsValid()
    return 1
endfunction
let g:tagbar_vertical = 30
nmap tb :TagbarToggle<CR> 


" <<windowManager>>
" 解决每次wm出现一个空的窗口的问题,打开plugin/winmanager.vim
" toggle showing the explorer plugins.
"function! <SID>ToggleWindowsManager()
"        if IsWinManagerVisible()
"                call s:CloseWindowsManager()
"        else
"                call s:StartWindowsManager()
"	"解决空白窗口问题
"                exe 'q'
"        end
"endfunction


" ---------------Bundle configuration ---------------

set nocompatible              " be iMproved, required
filetype off                  " required

" set the runtime path to include Vundle and initialize
set rtp+=~/.vim/bundle/Vundle.vim
call vundle#begin()
" alternatively, pass a path where Vundle should install plugins
"call vundle#begin('~/some/path/here')

" let Vundle manage Vundle, required
Plugin 'VundleVim/Vundle.vim'


Bundle 'taglist.vim'
Bundle 'SuperTab'
Bundle 'winmanager'
Bundle 'minibufexpl.vim'
Bundle 'The-NERD-tree'
"Bundle 'OmniCppComplete'
Bundle 'Taglist.vim'
Bundle 'Tagbar'
Bundle 'Valloric/YouCompleteMe'

"" 缩进提示线
"缩进插件1
"Plugin 'Yggdroot/indentLine'
"let g:indentLine_char='¦'
"let g:indentLine_enabled = 1
"缩进插件2
Plugin 'nathanaelkane/vim-indent-guides'
let g:indent_guides_enable_on_vim_startup = 1
let g:indent_guides_auto_colors = 0
let g:indent_guides_guide_size = 1
hi IndentGuidesOdd  guibg=red   ctermbg=3
hi IndentGuidesEven guibg=green ctermbg=4
highlight DiffAdd    cterm=NONE ctermfg=0 ctermbg=2
highlight DiffDelete cterm=NONE ctermfg=0 ctermbg=1
highlight DiffChange cterm=NONE ctermfg=0 ctermbg=6
highlight DiffText   cterm=NONE ctermfg=0 ctermbg=6
" Go to '~/.vim/bundle/vim-indent-guides/autoload' folder
" Put 'highlight Normal ctermbg=NONE' in the first line of indent_guides.vim


" All of your Plugins must be added before the following line
call vundle#end()            " required
filetype plugin indent on    " required
" To ignore plugin indent changes, instead use:
"filetype plugin on
"
" Brief help
" :PluginList       - lists configured plugins
" :PluginInstall    - installs plugins; append `!` to update or just :PluginUpdate
" :PluginSearch foo - searches for foo; append `!` to refresh local cache
" :PluginClean      - confirms removal of unused plugins; append `!` to auto-approve removal
"
" see :h vundle for more details or wiki for FAQ
" Put your non-Plugin stuff after this line

" ----------------------------------------------------------- "
" ----lyb-----2017-06-15"
" 加入split快捷跳转方式
" 加入buffer用法说明
" 加入python代码折叠 "
" 加入退出下次打开相同文件的时候进入上次位置的配置
" set mouse=a 在mac需要按住opt才能选中内容，在linux需要按住shift
	" 备用方案，在mac上可以直接y复制到*寄存器，和系统可以互通

au BufReadPost * if line("'\"") > 0|if line("'\"") <= line("$")|exe("norm '\"")|else|exe "norm $"|endif|endif

" add split direction"
" split key: sb(sv)   vs
set splitbelow
set splitright
" split navigations
nnoremap <C-J> <C-W><C-J>
nnoremap <C-K> <C-W><C-K>
nnoremap <C-L> <C-W><C-L>
nnoremap <C-H> <C-W><C-H>

set foldenable              " 开始折叠
set foldmethod=indent       " 设置缩进折叠
"set foldmethod=syntax       " 设置语法折叠
set foldcolumn=0            " 设置折叠区域的宽度
setlocal foldlevel=1        " 设置折叠层数为
set foldlevelstart=99       " 打开文件是默认不折叠代码

"set foldclose=all          " 设置为自动关闭折叠
nnoremap <space> @=((foldclosed(line('.')) < 0) ? 'zc' : 'zo')<CR>
                            " 用空格键来开关折叠
" 使用，空格在对应位置打开关闭折叠"
" zR 关闭全部折叠，zM打开全部折叠

" vim *.py 打开所有文件到缓冲区
" :ls 查看缓冲区列表
" :b 1 进入缓冲区文件
" :sb 1
" :vs a.name
" 缓冲区文件名支持tab，支持模糊匹配

" mac 系统有效，但是ubuntu以及arclinux没看出来作用
set clipboard=unnamed  " 使用y拷贝到vim寄存器*默认和系统可以互通

let g:ycm_python_binary_path = 'python'
"colorscheme delek
